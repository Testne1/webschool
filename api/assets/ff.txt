<?php
// Tên file lưu dữ liệu
$data_file = "data.txt";

// Hàm đọc dữ liệu từ file, loại bỏ các mục đã hết hạn
function load_ip_key() {
    global $data_file;
    if (!file_exists($data_file)) {
        return [];
    }

    $lines = file($data_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $data = [];
    $now = time();
    $new_lines = [];

    foreach ($lines as $line) {
        list($ip, $key, $expiry) = explode(",", $line);
        if ($expiry > $now) { // Chỉ giữ lại các bản ghi hợp lệ
            $data[$ip] = $key;
            $new_lines[] = $line;
        }
    }

    // Cập nhật file với các bản ghi hợp lệ
    file_put_contents($data_file, implode("\n", $new_lines) . "\n");
    return $data;
}

// Kiểm tra URL chi tiết
function validate_url($url) {
    // Kiểm tra URL có hợp lệ không
    if (filter_var($url, FILTER_VALIDATE_URL) === FALSE) {
        return false;
    }

    // Kiểm tra scheme
    $parsed_url = parse_url($url);
    if (!isset($parsed_url['scheme']) || !in_array($parsed_url['scheme'], ['http', 'https'])) {
        return false;
    }

    // Kiểm tra domain
    $allowed_domains = [
        'short.link',
        'www.short.link'
    ];
    $host = $parsed_url['host'] ?? '';
    if (!in_array($host, $allowed_domains)) {
        return false;
    }

    // Kiểm tra path và query
    if (isset($parsed_url['path'])) {
        // Chỉ cho phép path ngắn, không chứa các ký tự đặc biệt
        if (strlen($parsed_url['path']) > 50 || !preg_match('/^\/[a-zA-Z0-9\-_]+$/', $parsed_url['path'])) {
            return false;
        }
    }

    return true;
}

// Kiểm tra IP
function validate_ip($ip) {
    // Loại bỏ các IP private, reserved
    if (
        filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) === FALSE ||
        $ip === '127.0.0.1' ||
        $ip === '::1'
    ) {
        return false;
    }

    return true;
}

// Kiểm tra referrer
function validate_referrer() {
    $allowed_referrers = [
        'https://short.link',
        'https://www.short.link'
    ];

    $referrer = $_SERVER['HTTP_REFERER'] ?? '';
    
    foreach ($allowed_referrers as $allowed) {
        if (strpos($referrer, $allowed) === 0) {
            return true;
        }
    }

    return false;
}

// Kiểm tra User-Agent
function validate_user_agent() {
    $user_agent = $_SERVER['HTTP_USER_AGENT'] ?? '';
    
    // Danh sách các User-Agent được chấp nhận (ví dụ)
    $allowed_user_agents = [
        'Mozilla',
        'Chrome',
        'Safari',
        'Firefox',
        // Thêm các user agent khác nếu cần
    ];

    foreach ($allowed_user_agents as $allowed) {
        if (strpos($user_agent, $allowed) !== false) {
            return true;
        }
    }

    return false;
}

// Xử lý yêu cầu POST
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Kiểm tra Content-Type
    $content_type = $_SERVER['CONTENT_TYPE'] ?? '';
    if ($content_type !== 'application/json') {
        http_response_code(415); // Unsupported Media Type
        echo json_encode(["error" => "Invalid content type"]);
        exit;
    }

    // Kiểm tra referrer
    if (!validate_referrer()) {
        http_response_code(403);
        echo json_encode(["error" => "Invalid referrer"]);
        exit;
    }

    // Kiểm tra User-Agent
    if (!validate_user_agent()) {
        http_response_code(403);
        echo json_encode(["error" => "Invalid user agent"]);
        exit;
    }

    // Đọc dữ liệu POST
    $request_body = file_get_contents('php://input');
    
    // Kiểm tra kích thước request
    if (strlen($request_body) > 1024) {
        http_response_code(413); // Payload Too Large
        echo json_encode(["error" => "Request too large"]);
        exit;
    }

    // Giải mã JSON
    $data = json_decode($request_body, true);

    // Kiểm tra việc giải mã JSON
    if (json_last_error() !== JSON_ERROR_NONE) {
        http_response_code(400);
        echo json_encode(["error" => "Invalid JSON"]);
        exit;
    }

    // Lấy các tham số
    $ip = $data['ip'] ?? null;
    $shortened_link = $data['shortened_link'] ?? null;
    $action = $data['action'] ?? null;

    // Kiểm tra tính hợp lệ của các tham số
    if (!$ip || !$shortened_link || !$action) {
        http_response_code(400);
        echo json_encode(["error" => "Missing required parameters"]);
        exit;
    }

    // Kiểm tra IP
    if (!validate_ip($ip)) {
        http_response_code(403);
        echo json_encode(["error" => "Invalid IP address"]);
        exit;
    }

    // Kiểm tra URL
    if (!validate_url($shortened_link)) {
        http_response_code(400);
        echo json_encode(["error" => "Invalid shortened link"]);
        exit;
    }

    // Xử lý các hành động
    switch ($action) {
        case 'get_key':
            // Xử lý logic lấy key
            $ip_key_map = load_ip_key();
            if (isset($ip_key_map[$ip])) {
                $key = $ip_key_map[$ip];
                echo json_encode(["result" => "success", "key" => $key]);
            } else {
                http_response_code(403);
                echo json_encode(["error" => "IP not authorized"]);
            }
            break;

        default:
            http_response_code(400);
            echo json_encode(["error" => "Invalid action"]);
            break;
    }

    exit;
}